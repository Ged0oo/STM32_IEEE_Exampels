
nagyCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000ccc  08000ccc  00010ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d04  08000d04  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08000d04  08000d04  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d04  08000d04  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d04  08000d04  00010d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d08  08000d08  00010d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08000d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000048  08000d54  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000d54  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000134e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000604  00000000  00000000  00021402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00021a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000108  00000000  00000000  00021b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000004c9  00000000  00000000  00021c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ac4  00000000  00000000  00022159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004a83  00000000  00000000  00022c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000490  00000000  00000000  000276a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00027b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000048 	.word	0x20000048
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cb4 	.word	0x08000cb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000004c 	.word	0x2000004c
 800016c:	08000cb4 	.word	0x08000cb4

08000170 <GPIO_voidInitPortPin>:

static void GPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8 Copy_u8Pin , uint8 Copy_u8Mode);


void GPIO_voidInitPortPin(GPIO_ConfigType *_gpio)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8 Copy_u8Pin  = _gpio->GPIO_PinNumber;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	791b      	ldrb	r3, [r3, #4]
 800017c:	73fb      	strb	r3, [r7, #15]
	uint8 Copy_u8Mode = _gpio->GPIO_PinMode;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	795b      	ldrb	r3, [r3, #5]
 8000182:	73bb      	strb	r3, [r7, #14]
	if(Copy_u8Pin > 15)
 8000184:	7bfb      	ldrb	r3, [r7, #15]
 8000186:	2b0f      	cmp	r3, #15
 8000188:	d80d      	bhi.n	80001a6 <GPIO_voidInitPortPin+0x36>
	{
		return;
	}
	GPIO_voidConfgPin_Mode(_gpio->GPIOx , Copy_u8Pin , Copy_u8Mode);
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	7bba      	ldrb	r2, [r7, #14]
 8000190:	7bf9      	ldrb	r1, [r7, #15]
 8000192:	4618      	mov	r0, r3
 8000194:	f000 f80b 	bl	80001ae <GPIO_voidConfgPin_Mode>
	GPIO_voidWritePortPin(_gpio , _gpio->GPIO_Logic);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	799b      	ldrb	r3, [r3, #6]
 800019c:	4619      	mov	r1, r3
 800019e:	6878      	ldr	r0, [r7, #4]
 80001a0:	f000 f84a 	bl	8000238 <GPIO_voidWritePortPin>
 80001a4:	e000      	b.n	80001a8 <GPIO_voidInitPortPin+0x38>
		return;
 80001a6:	bf00      	nop
}
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}

080001ae <GPIO_voidConfgPin_Mode>:


static void GPIO_voidConfgPin_Mode(GPIO_t *GPIOx , uint8 Copy_u8Pin , uint8 Copy_u8Mode)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
 80001b6:	460b      	mov	r3, r1
 80001b8:	70fb      	strb	r3, [r7, #3]
 80001ba:	4613      	mov	r3, r2
 80001bc:	70bb      	strb	r3, [r7, #2]
	if(Copy_u8Pin > 15)
 80001be:	78fb      	ldrb	r3, [r7, #3]
 80001c0:	2b0f      	cmp	r3, #15
 80001c2:	d834      	bhi.n	800022e <GPIO_voidConfgPin_Mode+0x80>
	{
		return;
	}

	if (Copy_u8Pin <= 7)
 80001c4:	78fb      	ldrb	r3, [r7, #3]
 80001c6:	2b07      	cmp	r3, #7
 80001c8:	d815      	bhi.n	80001f6 <GPIO_voidConfgPin_Mode+0x48>
	{
		/* clear bits */
		GPIOx->CRL &= ~(0xF << Copy_u8Pin*4); /* multiplied *4 because every pin uses 4 bits*/
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	78fa      	ldrb	r2, [r7, #3]
 80001d0:	0092      	lsls	r2, r2, #2
 80001d2:	210f      	movs	r1, #15
 80001d4:	fa01 f202 	lsl.w	r2, r1, r2
 80001d8:	43d2      	mvns	r2, r2
 80001da:	401a      	ands	r2, r3
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	601a      	str	r2, [r3, #0]
		
		/*Assign needed mode*/
		GPIOx->CRL |= (Copy_u8Mode << Copy_u8Pin*4);
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	78b9      	ldrb	r1, [r7, #2]
 80001e6:	78fa      	ldrb	r2, [r7, #3]
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	fa01 f202 	lsl.w	r2, r1, r2
 80001ee:	431a      	orrs	r2, r3
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	e01c      	b.n	8000230 <GPIO_voidConfgPin_Mode+0x82>
	}
	else if(Copy_u8Pin <= 15)
 80001f6:	78fb      	ldrb	r3, [r7, #3]
 80001f8:	2b0f      	cmp	r3, #15
 80001fa:	d819      	bhi.n	8000230 <GPIO_voidConfgPin_Mode+0x82>
	{
		//return pin index to be from p0 to p7
		Copy_u8Pin = Copy_u8Pin - 8;
 80001fc:	78fb      	ldrb	r3, [r7, #3]
 80001fe:	3b08      	subs	r3, #8
 8000200:	70fb      	strb	r3, [r7, #3]
		
		/*clear bits*/
		GPIOx->CRH &= ~(0xF << Copy_u8Pin*4);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	685b      	ldr	r3, [r3, #4]
 8000206:	78fa      	ldrb	r2, [r7, #3]
 8000208:	0092      	lsls	r2, r2, #2
 800020a:	210f      	movs	r1, #15
 800020c:	fa01 f202 	lsl.w	r2, r1, r2
 8000210:	43d2      	mvns	r2, r2
 8000212:	401a      	ands	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	605a      	str	r2, [r3, #4]
		
		/*Assign needed mode*/
		GPIOx->CRH |= (Copy_u8Mode << Copy_u8Pin*4);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	78b9      	ldrb	r1, [r7, #2]
 800021e:	78fa      	ldrb	r2, [r7, #3]
 8000220:	0092      	lsls	r2, r2, #2
 8000222:	fa01 f202 	lsl.w	r2, r1, r2
 8000226:	431a      	orrs	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	e000      	b.n	8000230 <GPIO_voidConfgPin_Mode+0x82>
		return;
 800022e:	bf00      	nop
	}
}
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <GPIO_voidWritePortPin>:



void GPIO_voidWritePortPin(GPIO_ConfigType *_gpio , uint8 Copy_u8Val)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	460b      	mov	r3, r1
 8000242:	70fb      	strb	r3, [r7, #3]
	if(_gpio->GPIO_PinNumber > 15)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	791b      	ldrb	r3, [r3, #4]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d816      	bhi.n	800027a <GPIO_voidWritePortPin+0x42>
	{
		return;
	}

	if(Copy_u8Val == GPIO_HIGH)
 800024c:	78fb      	ldrb	r3, [r7, #3]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d109      	bne.n	8000266 <GPIO_voidWritePortPin+0x2e>
	{
		_gpio->GPIOx->BSRR = 1 << (_gpio->GPIO_PinNumber);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	791b      	ldrb	r3, [r3, #4]
 8000256:	461a      	mov	r2, r3
 8000258:	2301      	movs	r3, #1
 800025a:	fa03 f202 	lsl.w	r2, r3, r2
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	611a      	str	r2, [r3, #16]
 8000264:	e00a      	b.n	800027c <GPIO_voidWritePortPin+0x44>
	}
	else
	{
		_gpio->GPIOx->BRR  = 1 << (_gpio->GPIO_PinNumber);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	791b      	ldrb	r3, [r3, #4]
 800026a:	461a      	mov	r2, r3
 800026c:	2301      	movs	r3, #1
 800026e:	fa03 f202 	lsl.w	r2, r3, r2
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	615a      	str	r2, [r3, #20]
 8000278:	e000      	b.n	800027c <GPIO_voidWritePortPin+0x44>
		return;
 800027a:	bf00      	nop
	}
}
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <lcd_4bit_intialize>:
};



void lcd_4bit_intialize(chr_lcd_4bit_t *lcd)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	uint8 l_data_pins_counter = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
	if(NULL == lcd)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d067      	beq.n	8000366 <lcd_4bit_intialize+0xe2>
	{
		return;
	}
	else
	{
		lcd->lcd_rs.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2202      	movs	r2, #2
 800029a:	715a      	strb	r2, [r3, #5]
		lcd->lcd_rw.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2202      	movs	r2, #2
 80002a0:	735a      	strb	r2, [r3, #13]
		lcd->lcd_en.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2202      	movs	r2, #2
 80002a6:	755a      	strb	r2, [r3, #21]

		lcd->lcd_rs.GPIO_Logic = GPIO_LOW;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2200      	movs	r2, #0
 80002ac:	719a      	strb	r2, [r3, #6]
		lcd->lcd_rw.GPIO_Logic = GPIO_LOW;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2200      	movs	r2, #0
 80002b2:	739a      	strb	r2, [r3, #14]
		lcd->lcd_en.GPIO_Logic = GPIO_LOW;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	759a      	strb	r2, [r3, #22]

		GPIO_voidInitPortPin(&(lcd->lcd_rs));
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff57 	bl	8000170 <GPIO_voidInitPortPin>
		GPIO_voidInitPortPin(&(lcd->lcd_rw));
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3308      	adds	r3, #8
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff52 	bl	8000170 <GPIO_voidInitPortPin>
		GPIO_voidInitPortPin(&(lcd->lcd_en));
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3310      	adds	r3, #16
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff4d 	bl	8000170 <GPIO_voidInitPortPin>

		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	73fb      	strb	r3, [r7, #15]
 80002da:	e018      	b.n	800030e <lcd_4bit_intialize+0x8a>
		{
			lcd->lcd_data[l_data_pins_counter].GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_2MHZ;
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	3303      	adds	r3, #3
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	4413      	add	r3, r2
 80002e6:	2202      	movs	r2, #2
 80002e8:	715a      	strb	r2, [r3, #5]
			lcd->lcd_data[l_data_pins_counter].GPIO_Logic = GPIO_LOW;
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	3303      	adds	r3, #3
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	4413      	add	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	719a      	strb	r2, [r3, #6]
			GPIO_voidInitPortPin(&(lcd->lcd_data[l_data_pins_counter]));
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	3303      	adds	r3, #3
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff34 	bl	8000170 <GPIO_voidInitPortPin>
		for(l_data_pins_counter=0 ; l_data_pins_counter<4 ; l_data_pins_counter++)
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	3301      	adds	r3, #1
 800030c:	73fb      	strb	r3, [r7, #15]
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d9e3      	bls.n	80002dc <lcd_4bit_intialize+0x58>
		}

		//__delay_ms(20);
		for(uint32 i=0 ; i<11000 ; i++) asm("NOP");
 8000314:	2300      	movs	r3, #0
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	e003      	b.n	8000322 <lcd_4bit_intialize+0x9e>
 800031a:	bf00      	nop
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	f642 22f7 	movw	r2, #10999	; 0x2af7
 8000328:	4293      	cmp	r3, r2
 800032a:	d9f6      	bls.n	800031a <lcd_4bit_intialize+0x96>
		lcd_4bit_send_command(lcd, 0x33);
 800032c:	2133      	movs	r1, #51	; 0x33
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f000 f81d 	bl	800036e <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, 0x32);
 8000334:	2132      	movs	r1, #50	; 0x32
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f000 f819 	bl	800036e <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
 800033c:	2128      	movs	r1, #40	; 0x28
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f000 f815 	bl	800036e <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
 8000344:	210c      	movs	r1, #12
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f000 f811 	bl	800036e <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
 800034c:	2106      	movs	r1, #6
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 f80d 	bl	800036e <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_DDRAM_START);
 8000354:	2180      	movs	r1, #128	; 0x80
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f809 	bl	800036e <lcd_4bit_send_command>
		lcd_4bit_send_command(lcd, _LCD_CLEAR);
 800035c:	2101      	movs	r1, #1
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f000 f805 	bl	800036e <lcd_4bit_send_command>
 8000364:	e000      	b.n	8000368 <lcd_4bit_intialize+0xe4>
		return;
 8000366:	bf00      	nop

	}
}
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <lcd_4bit_send_command>:

void lcd_4bit_send_command(chr_lcd_4bit_t *lcd, uint8 command)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b082      	sub	sp, #8
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d01d      	beq.n	80003bc <lcd_4bit_send_command+0x4e>
	{
		return;
	}
	else
	{
		GPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_LOW);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff57 	bl	8000238 <GPIO_voidWritePortPin>
		GPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3308      	adds	r3, #8
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff51 	bl	8000238 <GPIO_voidWritePortPin>
		lcd_send_4bits(lcd, command >> 4);
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	091b      	lsrs	r3, r3, #4
 800039a:	b2db      	uxtb	r3, r3
 800039c:	4619      	mov	r1, r3
 800039e:	6878      	ldr	r0, [r7, #4]
 80003a0:	f000 f8b6 	bl	8000510 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f000 f8ef 	bl	8000588 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, command);
 80003aa:	78fb      	ldrb	r3, [r7, #3]
 80003ac:	4619      	mov	r1, r3
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 f8ae 	bl	8000510 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f000 f8e7 	bl	8000588 <lcd_4bit_send_enable_signal>
 80003ba:	e000      	b.n	80003be <lcd_4bit_send_command+0x50>
		return;
 80003bc:	bf00      	nop
	}
}
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <lcd_4bit_send_custom_char>:


void lcd_4bit_send_custom_char(chr_lcd_4bit_t *lcd, const uint8 _chr[], uint8 row, uint8 column, uint8 mem_pos)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	4611      	mov	r1, r2
 80003d0:	461a      	mov	r2, r3
 80003d2:	460b      	mov	r3, r1
 80003d4:	71fb      	strb	r3, [r7, #7]
 80003d6:	4613      	mov	r3, r2
 80003d8:	71bb      	strb	r3, [r7, #6]
	uint8 lcd_counter = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	75fb      	strb	r3, [r7, #23]
	if(NULL == lcd)
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d022      	beq.n	800042a <lcd_4bit_send_custom_char+0x66>
	{
		return;
	}
	else
	{
		lcd_4bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
 80003e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003e8:	3308      	adds	r3, #8
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	4619      	mov	r1, r3
 80003f2:	68f8      	ldr	r0, [r7, #12]
 80003f4:	f7ff ffbb 	bl	800036e <lcd_4bit_send_command>
		for(lcd_counter=0; lcd_counter<=7 ; ++lcd_counter)
 80003f8:	2300      	movs	r3, #0
 80003fa:	75fb      	strb	r3, [r7, #23]
 80003fc:	e00a      	b.n	8000414 <lcd_4bit_send_custom_char+0x50>
		{
			lcd_4bit_send_char_data(lcd, _chr[lcd_counter]);
 80003fe:	7dfb      	ldrb	r3, [r7, #23]
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	4413      	add	r3, r2
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4619      	mov	r1, r3
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f000 f812 	bl	8000432 <lcd_4bit_send_char_data>
		for(lcd_counter=0; lcd_counter<=7 ; ++lcd_counter)
 800040e:	7dfb      	ldrb	r3, [r7, #23]
 8000410:	3301      	adds	r3, #1
 8000412:	75fb      	strb	r3, [r7, #23]
 8000414:	7dfb      	ldrb	r3, [r7, #23]
 8000416:	2b07      	cmp	r3, #7
 8000418:	d9f1      	bls.n	80003fe <lcd_4bit_send_custom_char+0x3a>
		}
		lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
 800041a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800041e:	79ba      	ldrb	r2, [r7, #6]
 8000420:	79f9      	ldrb	r1, [r7, #7]
 8000422:	68f8      	ldr	r0, [r7, #12]
 8000424:	f000 f830 	bl	8000488 <lcd_4bit_send_char_data_pos>
 8000428:	e000      	b.n	800042c <lcd_4bit_send_custom_char+0x68>
		return;
 800042a:	bf00      	nop
	}
}
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <lcd_4bit_send_char_data>:

void lcd_4bit_send_char_data(chr_lcd_4bit_t *lcd, uint8 data)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	70fb      	strb	r3, [r7, #3]
	if(NULL == lcd)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d01d      	beq.n	8000480 <lcd_4bit_send_char_data+0x4e>
	{
		return;
	}
	else
	{
		GPIO_voidWritePortPin(&(lcd->lcd_rs), GPIO_HIGH);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2101      	movs	r1, #1
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fef5 	bl	8000238 <GPIO_voidWritePortPin>
		GPIO_voidWritePortPin(&(lcd->lcd_rw), GPIO_LOW);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3308      	adds	r3, #8
 8000452:	2100      	movs	r1, #0
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff feef 	bl	8000238 <GPIO_voidWritePortPin>
		lcd_send_4bits(lcd, data >> 4);
 800045a:	78fb      	ldrb	r3, [r7, #3]
 800045c:	091b      	lsrs	r3, r3, #4
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f000 f854 	bl	8000510 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f88d 	bl	8000588 <lcd_4bit_send_enable_signal>
		lcd_send_4bits(lcd, data);
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	4619      	mov	r1, r3
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 f84c 	bl	8000510 <lcd_send_4bits>
		lcd_4bit_send_enable_signal(lcd);
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f000 f885 	bl	8000588 <lcd_4bit_send_enable_signal>
 800047e:	e000      	b.n	8000482 <lcd_4bit_send_char_data+0x50>
		return;
 8000480:	bf00      	nop
	}
}
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <lcd_4bit_send_char_data_pos>:


void lcd_4bit_send_char_data_pos(chr_lcd_4bit_t *lcd,uint8 row, uint8 column, uint8 data)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	4608      	mov	r0, r1
 8000492:	4611      	mov	r1, r2
 8000494:	461a      	mov	r2, r3
 8000496:	4603      	mov	r3, r0
 8000498:	70fb      	strb	r3, [r7, #3]
 800049a:	460b      	mov	r3, r1
 800049c:	70bb      	strb	r3, [r7, #2]
 800049e:	4613      	mov	r3, r2
 80004a0:	707b      	strb	r3, [r7, #1]
	if(NULL == lcd)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d00b      	beq.n	80004c0 <lcd_4bit_send_char_data_pos+0x38>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 80004a8:	78ba      	ldrb	r2, [r7, #2]
 80004aa:	78fb      	ldrb	r3, [r7, #3]
 80004ac:	4619      	mov	r1, r3
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f000 f892 	bl	80005d8 <lcd_4bit_set_cursor>
		lcd_4bit_send_char_data(lcd, data);
 80004b4:	787b      	ldrb	r3, [r7, #1]
 80004b6:	4619      	mov	r1, r3
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ffba 	bl	8000432 <lcd_4bit_send_char_data>
 80004be:	e000      	b.n	80004c2 <lcd_4bit_send_char_data_pos+0x3a>
		return;
 80004c0:	bf00      	nop
	}
}
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <lcd_4bit_send_string_pos>:
	}
}


void lcd_4bit_send_string_pos(chr_lcd_4bit_t *lcd, uint8 row, uint8 column, uint8 *str)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	460b      	mov	r3, r1
 80004d4:	72fb      	strb	r3, [r7, #11]
 80004d6:	4613      	mov	r3, r2
 80004d8:	72bb      	strb	r3, [r7, #10]
	if(NULL == lcd)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d013      	beq.n	8000508 <lcd_4bit_send_string_pos+0x40>
	{
		return;
	}
	else
	{
		lcd_4bit_set_cursor(lcd, row, column);
 80004e0:	7aba      	ldrb	r2, [r7, #10]
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	4619      	mov	r1, r3
 80004e6:	68f8      	ldr	r0, [r7, #12]
 80004e8:	f000 f876 	bl	80005d8 <lcd_4bit_set_cursor>
		while(*str)
 80004ec:	e007      	b.n	80004fe <lcd_4bit_send_string_pos+0x36>
		{
			lcd_4bit_send_char_data(lcd, *str++);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4619      	mov	r1, r3
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f7ff ff9a 	bl	8000432 <lcd_4bit_send_char_data>
		while(*str)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1f3      	bne.n	80004ee <lcd_4bit_send_string_pos+0x26>
 8000506:	e000      	b.n	800050a <lcd_4bit_send_string_pos+0x42>
		return;
 8000508:	bf00      	nop
		}
	}
}
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <lcd_send_4bits>:

}


static void lcd_send_4bits(chr_lcd_4bit_t *lcd, uint8 _data_command)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
	GPIO_voidWritePortPin(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f103 0218 	add.w	r2, r3, #24
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4619      	mov	r1, r3
 800052c:	4610      	mov	r0, r2
 800052e:	f7ff fe83 	bl	8000238 <GPIO_voidWritePortPin>
	GPIO_voidWritePortPin(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f103 0220 	add.w	r2, r3, #32
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	085b      	lsrs	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4619      	mov	r1, r3
 8000546:	4610      	mov	r0, r2
 8000548:	f7ff fe76 	bl	8000238 <GPIO_voidWritePortPin>
	GPIO_voidWritePortPin(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000552:	78fb      	ldrb	r3, [r7, #3]
 8000554:	089b      	lsrs	r3, r3, #2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	4610      	mov	r0, r2
 8000562:	f7ff fe69 	bl	8000238 <GPIO_voidWritePortPin>
	GPIO_voidWritePortPin(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	08db      	lsrs	r3, r3, #3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	4610      	mov	r0, r2
 800057c:	f7ff fe5c 	bl	8000238 <GPIO_voidWritePortPin>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <lcd_4bit_send_enable_signal>:


static void lcd_4bit_send_enable_signal(chr_lcd_4bit_t *lcd)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	GPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_HIGH);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3310      	adds	r3, #16
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe4e 	bl	8000238 <GPIO_voidWritePortPin>
	//__delay_us(5);
	for(uint8 i=0 ; i<10 ; i++);
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e002      	b.n	80005a8 <lcd_4bit_send_enable_signal+0x20>
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	3301      	adds	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	2b09      	cmp	r3, #9
 80005ac:	d9f9      	bls.n	80005a2 <lcd_4bit_send_enable_signal+0x1a>
	GPIO_voidWritePortPin(&(lcd->lcd_en), GPIO_LOW);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3310      	adds	r3, #16
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fe3f 	bl	8000238 <GPIO_voidWritePortPin>
	for(uint16 i=0 ; i<2000 ; i++);
 80005ba:	2300      	movs	r3, #0
 80005bc:	81bb      	strh	r3, [r7, #12]
 80005be:	e002      	b.n	80005c6 <lcd_4bit_send_enable_signal+0x3e>
 80005c0:	89bb      	ldrh	r3, [r7, #12]
 80005c2:	3301      	adds	r3, #1
 80005c4:	81bb      	strh	r3, [r7, #12]
 80005c6:	89bb      	ldrh	r3, [r7, #12]
 80005c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80005cc:	d3f8      	bcc.n	80005c0 <lcd_4bit_send_enable_signal+0x38>
}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <lcd_4bit_set_cursor>:


static void lcd_4bit_set_cursor(chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
 80005e4:	4613      	mov	r3, r2
 80005e6:	70bb      	strb	r3, [r7, #2]
    coulmn--;
 80005e8:	78bb      	ldrb	r3, [r7, #2]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	70bb      	strb	r3, [r7, #2]
    switch(row)
 80005ee:	78fb      	ldrb	r3, [r7, #3]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d82a      	bhi.n	800064c <lcd_4bit_set_cursor+0x74>
 80005f6:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <lcd_4bit_set_cursor+0x24>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	0800060d 	.word	0x0800060d
 8000600:	0800061d 	.word	0x0800061d
 8000604:	0800062d 	.word	0x0800062d
 8000608:	0800063d 	.word	0x0800063d
    {
        case ROW1 :
        	lcd_4bit_send_command(lcd, (0x80 + coulmn));
 800060c:	78bb      	ldrb	r3, [r7, #2]
 800060e:	3b80      	subs	r3, #128	; 0x80
 8000610:	b2db      	uxtb	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff feaa 	bl	800036e <lcd_4bit_send_command>
        	break;
 800061a:	e017      	b.n	800064c <lcd_4bit_set_cursor+0x74>

        case ROW2 :
        	lcd_4bit_send_command(lcd, (0xc0 + coulmn));
 800061c:	78bb      	ldrb	r3, [r7, #2]
 800061e:	3b40      	subs	r3, #64	; 0x40
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fea2 	bl	800036e <lcd_4bit_send_command>
        	break;
 800062a:	e00f      	b.n	800064c <lcd_4bit_set_cursor+0x74>

        case ROW3 :
        	lcd_4bit_send_command(lcd, (0x94 + coulmn));
 800062c:	78bb      	ldrb	r3, [r7, #2]
 800062e:	3b6c      	subs	r3, #108	; 0x6c
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fe9a 	bl	800036e <lcd_4bit_send_command>
        	break;
 800063a:	e007      	b.n	800064c <lcd_4bit_set_cursor+0x74>

        case ROW4 :
        	lcd_4bit_send_command(lcd, (0xd4 + coulmn));
 800063c:	78bb      	ldrb	r3, [r7, #2]
 800063e:	3b2c      	subs	r3, #44	; 0x2c
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fe92 	bl	800036e <lcd_4bit_send_command>
        	break;
 800064a:	bf00      	nop

        default : ;
    }
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <LED_vInit>:
#include "LED_interface.h"
#include "LED_config.h"


void LED_vInit(LED_ConfigType *LED_obj)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if(NULL == LED_obj)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d010      	beq.n	8000684 <LED_vInit+0x30>
	else
	{
		GPIO_ConfigType led_obj =
		{
				.GPIO_Logic = LED_obj->LED_state,
				.GPIOx = LED_obj->GPIO_portX,
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
		GPIO_ConfigType led_obj =
 8000666:	60bb      	str	r3, [r7, #8]
				.GPIO_PinNumber = LED_obj->GPIO_pinX,
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
		GPIO_ConfigType led_obj =
 800066c:	733b      	strb	r3, [r7, #12]
 800066e:	2301      	movs	r3, #1
 8000670:	737b      	strb	r3, [r7, #13]
				.GPIO_Logic = LED_obj->LED_state,
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	795b      	ldrb	r3, [r3, #5]
		GPIO_ConfigType led_obj =
 8000676:	73bb      	strb	r3, [r7, #14]
				.GPIO_PinMode = GPIO_PIN_GENERAL_PURPOSE_OUTPUT_PUSHPULL_MODE_10MHZ
		};
		GPIO_voidInitPortPin(&led_obj);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fd77 	bl	8000170 <GPIO_voidInitPortPin>
 8000682:	e000      	b.n	8000686 <LED_vInit+0x32>
		return;
 8000684:	bf00      	nop
	}
}
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <LED_vToggle>:
	}
}


void LED_vToggle(LED_ConfigType *LED_obj)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	if(NULL == LED_obj)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d00a      	beq.n	80006b0 <LED_vToggle+0x24>
	{
		return;
	}
	else
	{
		LED_vInit(LED_obj);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ffda 	bl	8000654 <LED_vInit>
		LED_obj->LED_state ^= 1;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	795b      	ldrb	r3, [r3, #5]
 80006a4:	f083 0301 	eor.w	r3, r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	715a      	strb	r2, [r3, #5]
 80006ae:	e000      	b.n	80006b2 <LED_vToggle+0x26>
		return;
 80006b0:	bf00      	nop
	}
}
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MRCC_voidClockInit>:
static void RCC_voidClockSource(uint8 Copy_u8xClock);
static void RCC_voidPLL_Clock_Source(uint8 Copy_u8xPLL_Source);


void MRCC_voidClockInit(RCC_Config_t *RCC_Config)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if(NULL == RCC_Config)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d016      	beq.n	80006f4 <MRCC_voidClockInit+0x3c>
	{
		return;
	}
	else
	{
		RCC_voidClockSource(RCC_Config->ClockSource);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f852 	bl	8000774 <RCC_voidClockSource>
		if(RCC_Config->ClockSource == RCC_PLL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d109      	bne.n	80006ec <MRCC_voidClockInit+0x34>
		{
			RCC_voidPLL_Clock_Source(RCC_Config->PLL_Config.PLL_Source);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f8d9 	bl	8000894 <RCC_voidPLL_Clock_Source>
			RCC_voidPLL_Mul(RCC_Config->PLL_Config.PLL_Mul_Factor);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	789b      	ldrb	r3, [r3, #2]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f95a 	bl	80009a0 <RCC_voidPLL_Mul>
		else if(RCC_Config->ClockSource == RCC_HSI)
		{
			/* HSI Trim function*/
		}
		/* Adjust Prescaler */
		RCC_voidBus_Prescaler(RCC_Config);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f96b 	bl	80009c8 <RCC_voidBus_Prescaler>
 80006f2:	e000      	b.n	80006f6 <MRCC_voidClockInit+0x3e>
		return;
 80006f4:	bf00      	nop
	}
}
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <MRCC_voidPeripheralClockEnable>:


void MRCC_voidPeripheralClockEnable(uint8 Copy_u8BusName, RCC_Peripheral_t Copy_u8PeripheralName)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8BusName)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d01c      	beq.n	800074c <MRCC_voidPeripheralClockEnable+0x50>
 8000712:	2b02      	cmp	r3, #2
 8000714:	dc25      	bgt.n	8000762 <MRCC_voidPeripheralClockEnable+0x66>
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <MRCC_voidPeripheralClockEnable+0x24>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d00b      	beq.n	8000736 <MRCC_voidPeripheralClockEnable+0x3a>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
		break;

	default:
		/* return error */
		break;
 800071e:	e020      	b.n	8000762 <MRCC_voidPeripheralClockEnable+0x66>
		SET_BIT(RCC->AHBENR,Copy_u8PeripheralName);
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MRCC_voidPeripheralClockEnable+0x74>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <MRCC_voidPeripheralClockEnable+0x74>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6153      	str	r3, [r2, #20]
		break;
 8000734:	e016      	b.n	8000764 <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralName);
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MRCC_voidPeripheralClockEnable+0x74>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	79ba      	ldrb	r2, [r7, #6]
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	4611      	mov	r1, r2
 8000744:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <MRCC_voidPeripheralClockEnable+0x74>)
 8000746:	430b      	orrs	r3, r1
 8000748:	61d3      	str	r3, [r2, #28]
		break;
 800074a:	e00b      	b.n	8000764 <MRCC_voidPeripheralClockEnable+0x68>
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MRCC_voidPeripheralClockEnable+0x74>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f202 	lsl.w	r2, r1, r2
 8000758:	4611      	mov	r1, r2
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <MRCC_voidPeripheralClockEnable+0x74>)
 800075c:	430b      	orrs	r3, r1
 800075e:	6193      	str	r3, [r2, #24]
		break;
 8000760:	e000      	b.n	8000764 <MRCC_voidPeripheralClockEnable+0x68>
		break;
 8000762:	bf00      	nop
	}
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <RCC_voidClockSource>:

}


static void RCC_voidClockSource(uint8 Copy_u8xClock)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	/*First clear configuration bits*/
	CLEAR_BIT(RCC->CFGR , 0);
 800077e:	4b44      	ldr	r3, [pc, #272]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	4a43      	ldr	r2, [pc, #268]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(RCC->CFGR , 1);
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <RCC_voidClockSource+0x11c>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4a40      	ldr	r2, [pc, #256]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000790:	f023 0302 	bic.w	r3, r3, #2
 8000794:	6053      	str	r3, [r2, #4]

	/*Choose clock source*/
	switch(Copy_u8xClock)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d040      	beq.n	800081e <RCC_voidClockSource+0xaa>
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc58      	bgt.n	8000852 <RCC_voidClockSource+0xde>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <RCC_voidClockSource+0x36>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d01a      	beq.n	80007de <RCC_voidClockSource+0x6a>
 80007a8:	e053      	b.n	8000852 <RCC_voidClockSource+0xde>
	{
	/* Internal clock*/
	case RCC_HSI:
		/*Set HSION BIT*/
		SET_BIT(RCC->CR , 0);
 80007aa:	4b39      	ldr	r3, [pc, #228]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a38      	ldr	r2, [pc, #224]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]
		/*Wait until the clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 1));
 80007b6:	bf00      	nop
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0f9      	beq.n	80007b8 <RCC_voidClockSource+0x44>
		
		/* Select HSI as clock source */
		CLEAR_BIT(RCC->CFGR , 0);
 80007c4:	4b32      	ldr	r3, [pc, #200]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	4a31      	ldr	r2, [pc, #196]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007ca:	f023 0301 	bic.w	r3, r3, #1
 80007ce:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	6053      	str	r3, [r2, #4]
		break;
 80007dc:	e053      	b.n	8000886 <RCC_voidClockSource+0x112>

		/*External clock*/
	case RCC_HSE :
		/* Set HSEON BIT */
		SET_BIT(RCC->CR , 16);
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e8:	6013      	str	r3, [r2, #0]
		/* Check if Bypass is on */
		#if RCC_HSE_BYPASS == HSE_BYPASS_OFF_CRYSTAL
				CLEAR_BIT(RCC->CR , 18);
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a28      	ldr	r2, [pc, #160]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f4:	6013      	str	r3, [r2, #0]
		#elif RCC_HSE_BYPASS == HSE_BYPASS_ON_RC
				SET_BIT(RCC->CR , 18);
		#endif
		/*Wait until external clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 17));
 80007f6:	bf00      	nop
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <RCC_voidClockSource+0x11c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f9      	beq.n	80007f8 <RCC_voidClockSource+0x84>

		/* Select HSE as clock source */
		SET_BIT(RCC->CFGR , 0);
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <RCC_voidClockSource+0x11c>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000816:	f023 0302 	bic.w	r3, r3, #2
 800081a:	6053      	str	r3, [r2, #4]
		break;
 800081c:	e033      	b.n	8000886 <RCC_voidClockSource+0x112>

		/*PLL clock*/
	case RCC_PLL:
		/* Set PLLON BIT */
		SET_BIT(RCC->CR , 24);
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000828:	6013      	str	r3, [r2, #0]
		/*Wait until PLL clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 25));
 800082a:	bf00      	nop
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <RCC_voidClockSource+0x11c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0f9      	beq.n	800082c <RCC_voidClockSource+0xb8>

		CLEAR_BIT(RCC->CFGR , 0);
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <RCC_voidClockSource+0x11c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <RCC_voidClockSource+0x11c>)
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CFGR , 1);
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	4a11      	ldr	r2, [pc, #68]	; (8000890 <RCC_voidClockSource+0x11c>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	6053      	str	r3, [r2, #4]
		break;
 8000850:	e019      	b.n	8000886 <RCC_voidClockSource+0x112>

		/* default HSI will be used */
	default:
		/*Set HSION BIT*/
		SET_BIT(RCC->CR , 0);
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6013      	str	r3, [r2, #0]
		/*Wait until the clock is stable*/
		while(BIT_IS_CLEAR(RCC->CR , 1));
 800085e:	bf00      	nop
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0f9      	beq.n	8000860 <RCC_voidClockSource+0xec>
		
		/* Select HSI as clock source */
		CLEAR_BIT(RCC->CFGR , 0);
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <RCC_voidClockSource+0x11c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <RCC_voidClockSource+0x11c>)
 8000872:	f023 0301 	bic.w	r3, r3, #1
 8000876:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(RCC->CFGR , 1);
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <RCC_voidClockSource+0x11c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <RCC_voidClockSource+0x11c>)
 800087e:	f023 0302 	bic.w	r3, r3, #2
 8000882:	6053      	str	r3, [r2, #4]
		break;
 8000884:	bf00      	nop
	}
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000

08000894 <RCC_voidPLL_Clock_Source>:


static void RCC_voidPLL_Clock_Source(uint8 Copy_u8xPLL_Source)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	/* First Clear the Bits */
	CLEAR_BIT(RCC->CFGR,17);
 800089e:	4b3f      	ldr	r3, [pc, #252]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	4a3e      	ldr	r2, [pc, #248]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008a8:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(RCC->CFGR,16);
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b4:	6053      	str	r3, [r2, #4]

	switch(Copy_u8xPLL_Source)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d048      	beq.n	800094e <RCC_voidPLL_Clock_Source+0xba>
 80008bc:	2b02      	cmp	r3, #2
 80008be:	dc5a      	bgt.n	8000976 <RCC_voidPLL_Clock_Source+0xe2>
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <RCC_voidPLL_Clock_Source+0x36>
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d021      	beq.n	800090c <RCC_voidPLL_Clock_Source+0x78>
 80008c8:	e055      	b.n	8000976 <RCC_voidPLL_Clock_Source+0xe2>
	{
		case PLL_SRC_HSE_NOT_DEVIDED:
			/* Set HSEON BIT */
			SET_BIT(RCC->CR,16);
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d4:	6013      	str	r3, [r2, #0]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 80008d6:	bf00      	nop
 80008d8:	4b30      	ldr	r3, [pc, #192]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f9      	beq.n	80008d8 <RCC_voidPLL_Clock_Source+0x44>

			/*Select HSE as PLL source*/
			CLEAR_BIT(RCC->CFGR,17);
 80008e4:	4b2d      	ldr	r3, [pc, #180]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a2c      	ldr	r2, [pc, #176]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008ee:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR,16);
 80008f0:	4b2a      	ldr	r3, [pc, #168]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	4a29      	ldr	r2, [pc, #164]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fa:	6053      	str	r3, [r2, #4]
			
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 80008fc:	bf00      	nop
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <RCC_voidPLL_Clock_Source+0x6a>
			break;
 800090a:	e042      	b.n	8000992 <RCC_voidPLL_Clock_Source+0xfe>
			
		case PLL_SRC_HSE_DEVIDED_BY_2:
			/* Set HSEON BIT */
			SET_BIT(RCC->CR,16);
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000916:	6013      	str	r3, [r2, #0]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 8000918:	bf00      	nop
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f9      	beq.n	800091a <RCC_voidPLL_Clock_Source+0x86>

			/*Select HSE as PLL source*/
			SET_BIT(RCC->CFGR,17);
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR,16);
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a19      	ldr	r2, [pc, #100]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800093c:	6053      	str	r3, [r2, #4]
			/*Wait until external clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,17));
 800093e:	bf00      	nop
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f9      	beq.n	8000940 <RCC_voidPLL_Clock_Source+0xac>
			break;
 800094c:	e021      	b.n	8000992 <RCC_voidPLL_Clock_Source+0xfe>
			
		case PLL_SRC_HSI_DEVIDED_BY_2:
			/*Set HSION BIT*/
			SET_BIT(RCC->CR,0);
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6013      	str	r3, [r2, #0]
			/*Wait until the clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,1));
 800095a:	bf00      	nop
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f9      	beq.n	800095c <RCC_voidPLL_Clock_Source+0xc8>

			CLEAR_BIT(RCC->CFGR,16);
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 800096e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000972:	6053      	str	r3, [r2, #4]
			break;
 8000974:	e00d      	b.n	8000992 <RCC_voidPLL_Clock_Source+0xfe>
			
			/* default the PLL clock source is internal clock */
		default:
			/*Set HSION BIT*/
			SET_BIT(RCC->CR,0);
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6013      	str	r3, [r2, #0]
			/*Wait until the clock is stable*/
			while(BIT_IS_CLEAR(RCC->CR,1));
 8000982:	bf00      	nop
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <RCC_voidPLL_Clock_Source+0x108>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f9      	beq.n	8000984 <RCC_voidPLL_Clock_Source+0xf0>
			break;
 8000990:	bf00      	nop
	}
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000

080009a0 <RCC_voidPLL_Mul>:


static void RCC_voidPLL_Mul(uint8 Copy_u8xMul_Factor)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR |= (Copy_u8xMul_Factor << 18);
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <RCC_voidPLL_Mul+0x24>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	79fa      	ldrb	r2, [r7, #7]
 80009b0:	0492      	lsls	r2, r2, #18
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <RCC_voidPLL_Mul+0x24>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6053      	str	r3, [r2, #4]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000

080009c8 <RCC_voidBus_Prescaler>:


static void RCC_voidBus_Prescaler(RCC_Config_t *Copy_u8RCC_Config)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	if(NULL == Copy_u8RCC_Config)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d01b      	beq.n	8000a0e <RCC_voidBus_Prescaler+0x46>
	{
		return;
	}
	else
	{
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.AHB_Prescaler)  << 4);
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <RCC_voidBus_Prescaler+0x50>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	78d2      	ldrb	r2, [r2, #3]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	4611      	mov	r1, r2
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <RCC_voidBus_Prescaler+0x50>)
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.ABP1_Prescaler) << 8);
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <RCC_voidBus_Prescaler+0x50>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	7912      	ldrb	r2, [r2, #4]
 80009f0:	0212      	lsls	r2, r2, #8
 80009f2:	4611      	mov	r1, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <RCC_voidBus_Prescaler+0x50>)
 80009f6:	430b      	orrs	r3, r1
 80009f8:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= ((Copy_u8RCC_Config->Prescaler.ABP2_Prescaler) << 11);
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <RCC_voidBus_Prescaler+0x50>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	7952      	ldrb	r2, [r2, #5]
 8000a02:	02d2      	lsls	r2, r2, #11
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <RCC_voidBus_Prescaler+0x50>)
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6053      	str	r3, [r2, #4]
 8000a0c:	e000      	b.n	8000a10 <RCC_voidBus_Prescaler+0x48>
		return;
 8000a0e:	bf00      	nop
	}
}
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000

08000a1c <main>:
const uint8 customChar3[] = { 0x1F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1F };
const uint8 customChar4[] = { 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F };
const uint8 customChar5[] = { 0x18, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x18 };

int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
	MRCC_voidClockInit(&RCC_obj);
 8000a22:	4874      	ldr	r0, [pc, #464]	; (8000bf4 <main+0x1d8>)
 8000a24:	f7ff fe48 	bl	80006b8 <MRCC_voidClockInit>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOA_CLOCK);
 8000a28:	2102      	movs	r1, #2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f7ff fe66 	bl	80006fc <MRCC_voidPeripheralClockEnable>
	MRCC_voidPeripheralClockEnable(RCC_APB2_BUS , RCC_GPIOB_CLOCK);
 8000a30:	2103      	movs	r1, #3
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fe62 	bl	80006fc <MRCC_voidPeripheralClockEnable>

	LED_vInit(&led_1);
 8000a38:	486f      	ldr	r0, [pc, #444]	; (8000bf8 <main+0x1dc>)
 8000a3a:	f7ff fe0b 	bl	8000654 <LED_vInit>

	lcd_4bit_intialize(&lcd_1);
 8000a3e:	486f      	ldr	r0, [pc, #444]	; (8000bfc <main+0x1e0>)
 8000a40:	f7ff fc20 	bl	8000284 <lcd_4bit_intialize>
	lcd_4bit_send_string_pos(&lcd_1, 1, 2, "It's Happening");
 8000a44:	4b6e      	ldr	r3, [pc, #440]	; (8000c00 <main+0x1e4>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	2101      	movs	r1, #1
 8000a4a:	486c      	ldr	r0, [pc, #432]	; (8000bfc <main+0x1e0>)
 8000a4c:	f7ff fd3c 	bl	80004c8 <lcd_4bit_send_string_pos>

	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 2, 1);
 8000a50:	2301      	movs	r3, #1
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2302      	movs	r3, #2
 8000a56:	2202      	movs	r2, #2
 8000a58:	496a      	ldr	r1, [pc, #424]	; (8000c04 <main+0x1e8>)
 8000a5a:	4868      	ldr	r0, [pc, #416]	; (8000bfc <main+0x1e0>)
 8000a5c:	f7ff fcb2 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 3, 1);
 8000a60:	2301      	movs	r3, #1
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2303      	movs	r3, #3
 8000a66:	2202      	movs	r2, #2
 8000a68:	4966      	ldr	r1, [pc, #408]	; (8000c04 <main+0x1e8>)
 8000a6a:	4864      	ldr	r0, [pc, #400]	; (8000bfc <main+0x1e0>)
 8000a6c:	f7ff fcaa 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 4, 1);
 8000a70:	2301      	movs	r3, #1
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2304      	movs	r3, #4
 8000a76:	2202      	movs	r2, #2
 8000a78:	4962      	ldr	r1, [pc, #392]	; (8000c04 <main+0x1e8>)
 8000a7a:	4860      	ldr	r0, [pc, #384]	; (8000bfc <main+0x1e0>)
 8000a7c:	f7ff fca2 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 1, 1);
 8000a80:	2301      	movs	r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	2202      	movs	r2, #2
 8000a88:	495e      	ldr	r1, [pc, #376]	; (8000c04 <main+0x1e8>)
 8000a8a:	485c      	ldr	r0, [pc, #368]	; (8000bfc <main+0x1e0>)
 8000a8c:	f7ff fc9a 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 6, 1);
 8000a90:	2301      	movs	r3, #1
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2306      	movs	r3, #6
 8000a96:	2202      	movs	r2, #2
 8000a98:	495a      	ldr	r1, [pc, #360]	; (8000c04 <main+0x1e8>)
 8000a9a:	4858      	ldr	r0, [pc, #352]	; (8000bfc <main+0x1e0>)
 8000a9c:	f7ff fc92 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 7, 1);
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	4956      	ldr	r1, [pc, #344]	; (8000c04 <main+0x1e8>)
 8000aaa:	4854      	ldr	r0, [pc, #336]	; (8000bfc <main+0x1e0>)
 8000aac:	f7ff fc8a 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 8, 1);
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	4952      	ldr	r1, [pc, #328]	; (8000c04 <main+0x1e8>)
 8000aba:	4850      	ldr	r0, [pc, #320]	; (8000bfc <main+0x1e0>)
 8000abc:	f7ff fc82 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 9, 1);
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2309      	movs	r3, #9
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	494e      	ldr	r1, [pc, #312]	; (8000c04 <main+0x1e8>)
 8000aca:	484c      	ldr	r0, [pc, #304]	; (8000bfc <main+0x1e0>)
 8000acc:	f7ff fc7a 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 10,1);
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	230a      	movs	r3, #10
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	494a      	ldr	r1, [pc, #296]	; (8000c04 <main+0x1e8>)
 8000ada:	4848      	ldr	r0, [pc, #288]	; (8000bfc <main+0x1e0>)
 8000adc:	f7ff fc72 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 11,1);
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4946      	ldr	r1, [pc, #280]	; (8000c04 <main+0x1e8>)
 8000aea:	4844      	ldr	r0, [pc, #272]	; (8000bfc <main+0x1e0>)
 8000aec:	f7ff fc6a 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 12,1);
 8000af0:	2301      	movs	r3, #1
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	230c      	movs	r3, #12
 8000af6:	2202      	movs	r2, #2
 8000af8:	4942      	ldr	r1, [pc, #264]	; (8000c04 <main+0x1e8>)
 8000afa:	4840      	ldr	r0, [pc, #256]	; (8000bfc <main+0x1e0>)
 8000afc:	f7ff fc62 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 13,1);
 8000b00:	2301      	movs	r3, #1
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	230d      	movs	r3, #13
 8000b06:	2202      	movs	r2, #2
 8000b08:	493e      	ldr	r1, [pc, #248]	; (8000c04 <main+0x1e8>)
 8000b0a:	483c      	ldr	r0, [pc, #240]	; (8000bfc <main+0x1e0>)
 8000b0c:	f7ff fc5a 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 14,1);
 8000b10:	2301      	movs	r3, #1
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	230e      	movs	r3, #14
 8000b16:	2202      	movs	r2, #2
 8000b18:	493a      	ldr	r1, [pc, #232]	; (8000c04 <main+0x1e8>)
 8000b1a:	4838      	ldr	r0, [pc, #224]	; (8000bfc <main+0x1e0>)
 8000b1c:	f7ff fc52 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, 15,1);
 8000b20:	2301      	movs	r3, #1
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	230f      	movs	r3, #15
 8000b26:	2202      	movs	r2, #2
 8000b28:	4936      	ldr	r1, [pc, #216]	; (8000c04 <main+0x1e8>)
 8000b2a:	4834      	ldr	r0, [pc, #208]	; (8000bfc <main+0x1e0>)
 8000b2c:	f7ff fc4a 	bl	80003c4 <lcd_4bit_send_custom_char>
	lcd_4bit_send_custom_char(&lcd_1, customChar2, 2, 16,2);
 8000b30:	2302      	movs	r3, #2
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2310      	movs	r3, #16
 8000b36:	2202      	movs	r2, #2
 8000b38:	4933      	ldr	r1, [pc, #204]	; (8000c08 <main+0x1ec>)
 8000b3a:	4830      	ldr	r0, [pc, #192]	; (8000bfc <main+0x1e0>)
 8000b3c:	f7ff fc42 	bl	80003c4 <lcd_4bit_send_custom_char>
	while(1)
	{
		for(uint8 counter=1 ; counter<16 ; counter++)
 8000b40:	2301      	movs	r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	e019      	b.n	8000b7a <main+0x15e>
		{
			LED_vToggle(&led_1);
 8000b46:	482c      	ldr	r0, [pc, #176]	; (8000bf8 <main+0x1dc>)
 8000b48:	f7ff fda0 	bl	800068c <LED_vToggle>
			lcd_4bit_send_custom_char(&lcd_1, customChar4, 2, counter, 4);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2204      	movs	r2, #4
 8000b50:	9200      	str	r2, [sp, #0]
 8000b52:	2202      	movs	r2, #2
 8000b54:	492d      	ldr	r1, [pc, #180]	; (8000c0c <main+0x1f0>)
 8000b56:	4829      	ldr	r0, [pc, #164]	; (8000bfc <main+0x1e0>)
 8000b58:	f7ff fc34 	bl	80003c4 <lcd_4bit_send_custom_char>
			for(uint16 c=0;c<40000;c++) __asm volatile("NOP");
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	80bb      	strh	r3, [r7, #4]
 8000b60:	e003      	b.n	8000b6a <main+0x14e>
 8000b62:	bf00      	nop
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	3301      	adds	r3, #1
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d9f6      	bls.n	8000b62 <main+0x146>
		for(uint8 counter=1 ; counter<16 ; counter++)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	3301      	adds	r3, #1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d9e2      	bls.n	8000b46 <main+0x12a>
		}

		lcd_4bit_send_custom_char(&lcd_1, customChar5, 2, 16, 5);
 8000b80:	2305      	movs	r3, #5
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2310      	movs	r3, #16
 8000b86:	2202      	movs	r2, #2
 8000b88:	4921      	ldr	r1, [pc, #132]	; (8000c10 <main+0x1f4>)
 8000b8a:	481c      	ldr	r0, [pc, #112]	; (8000bfc <main+0x1e0>)
 8000b8c:	f7ff fc1a 	bl	80003c4 <lcd_4bit_send_custom_char>
		lcd_4bit_send_custom_char(&lcd_1, customChar3, 2, 1, 3);
 8000b90:	2303      	movs	r3, #3
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	2202      	movs	r2, #2
 8000b98:	491e      	ldr	r1, [pc, #120]	; (8000c14 <main+0x1f8>)
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <main+0x1e0>)
 8000b9c:	f7ff fc12 	bl	80003c4 <lcd_4bit_send_custom_char>

		for(uint8 counter=2;counter<16;counter++)
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	70fb      	strb	r3, [r7, #3]
 8000ba4:	e019      	b.n	8000bda <main+0x1be>
		{
			LED_vToggle(&led_1);
 8000ba6:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <main+0x1dc>)
 8000ba8:	f7ff fd70 	bl	800068c <LED_vToggle>
			lcd_4bit_send_custom_char(&lcd_1, customChar1, 2, counter, 1);
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	9200      	str	r2, [sp, #0]
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	4913      	ldr	r1, [pc, #76]	; (8000c04 <main+0x1e8>)
 8000bb6:	4811      	ldr	r0, [pc, #68]	; (8000bfc <main+0x1e0>)
 8000bb8:	f7ff fc04 	bl	80003c4 <lcd_4bit_send_custom_char>
			for(uint16 c=0;c<40000;c++) __asm volatile("NOP");
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	803b      	strh	r3, [r7, #0]
 8000bc0:	e003      	b.n	8000bca <main+0x1ae>
 8000bc2:	bf00      	nop
 8000bc4:	883b      	ldrh	r3, [r7, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	803b      	strh	r3, [r7, #0]
 8000bca:	883b      	ldrh	r3, [r7, #0]
 8000bcc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d9f6      	bls.n	8000bc2 <main+0x1a6>
		for(uint8 counter=2;counter<16;counter++)
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	70fb      	strb	r3, [r7, #3]
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d9e2      	bls.n	8000ba6 <main+0x18a>
		}
		lcd_4bit_send_custom_char(&lcd_1, customChar2, 2, 16, 2);
 8000be0:	2302      	movs	r3, #2
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2310      	movs	r3, #16
 8000be6:	2202      	movs	r2, #2
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <main+0x1ec>)
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <main+0x1e0>)
 8000bec:	f7ff fbea 	bl	80003c4 <lcd_4bit_send_custom_char>
		for(uint8 counter=1 ; counter<16 ; counter++)
 8000bf0:	e7a6      	b.n	8000b40 <main+0x124>
 8000bf2:	bf00      	nop
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	20000040 	.word	0x20000040
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	08000ccc 	.word	0x08000ccc
 8000c04:	08000cdc 	.word	0x08000cdc
 8000c08:	08000ce4 	.word	0x08000ce4
 8000c0c:	08000cf4 	.word	0x08000cf4
 8000c10:	08000cfc 	.word	0x08000cfc
 8000c14:	08000cec 	.word	0x08000cec

08000c18 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:



  ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	; (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	; (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c46:	f000 f811 	bl	8000c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4a:	f7ff fee7 	bl	8000a1c <main>

08000c4e <LoopForever>:

LoopForever:
  b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
  ldr   r0, =_estack
 8000c50:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000c5c:	08000d0c 	.word	0x08000d0c
  ldr r2, =_sbss
 8000c60:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000c64:	20000064 	.word	0x20000064

08000c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_2_IRQHandler>
	...

08000c6c <__libc_init_array>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	2600      	movs	r6, #0
 8000c70:	4d0c      	ldr	r5, [pc, #48]	; (8000ca4 <__libc_init_array+0x38>)
 8000c72:	4c0d      	ldr	r4, [pc, #52]	; (8000ca8 <__libc_init_array+0x3c>)
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	42a6      	cmp	r6, r4
 8000c7a:	d109      	bne.n	8000c90 <__libc_init_array+0x24>
 8000c7c:	f000 f81a 	bl	8000cb4 <_init>
 8000c80:	2600      	movs	r6, #0
 8000c82:	4d0a      	ldr	r5, [pc, #40]	; (8000cac <__libc_init_array+0x40>)
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <__libc_init_array+0x44>)
 8000c86:	1b64      	subs	r4, r4, r5
 8000c88:	10a4      	asrs	r4, r4, #2
 8000c8a:	42a6      	cmp	r6, r4
 8000c8c:	d105      	bne.n	8000c9a <__libc_init_array+0x2e>
 8000c8e:	bd70      	pop	{r4, r5, r6, pc}
 8000c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c94:	4798      	blx	r3
 8000c96:	3601      	adds	r6, #1
 8000c98:	e7ee      	b.n	8000c78 <__libc_init_array+0xc>
 8000c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c9e:	4798      	blx	r3
 8000ca0:	3601      	adds	r6, #1
 8000ca2:	e7f2      	b.n	8000c8a <__libc_init_array+0x1e>
 8000ca4:	08000d04 	.word	0x08000d04
 8000ca8:	08000d04 	.word	0x08000d04
 8000cac:	08000d04 	.word	0x08000d04
 8000cb0:	08000d08 	.word	0x08000d08

08000cb4 <_init>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr

08000cc0 <_fini>:
 8000cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc2:	bf00      	nop
 8000cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc6:	bc08      	pop	{r3}
 8000cc8:	469e      	mov	lr, r3
 8000cca:	4770      	bx	lr
